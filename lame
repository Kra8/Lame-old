#!/bin/sh

#################################################################################
#
#   lame
#   Laravel + Homestead の環境を簡単に整えることを目的とするスクリプト
#
#   @version    1.3.0
#   @update     2017/04/6
#   @develop    K.Asai (asai@teaapplications.com)
#
#################################################################################

readonly COLOR_RED="\033[31m"
readonly COLOR_GREEN="\033[32m"
readonly COLOR_YELLOW="\033[33m"
readonly COLOR_BLUE="\033[34m"
readonly COLOR_OFF="\033[m"
readonly CURRENT=`pwd`

readonly CMDNAME=$(basename $0)
readonly VERSION="1.3.0"


############################# Functions #############################

##
# エラーメッセージを標準出力する
#
# @param string
function error() { echo "$@" 1>&2; }

##
# エラーメッセージを標準出力し、スクリプトを終了する
#
# @param string
function abort() { error "$@"; exit 1; }

##
# コマンドが存在するか否かを返す
#
# @param    string
# @return   boolean
function commandIsExists() {
    if type $1 2>/dev/null 1>/dev/null;
    then
        echo "$1 is exists ... ${COLOR_GREEN}true${COLOR_OFF}"
        return 0
    else
        echo "${COLOR_YELLOW}$1 is not found${COLOR_OFF}"
        return 1
    fi
}

##
# Boxが存在するか否かを返す
#
# @param    string
# @return   boolean
function boxIsExists() {
    ## boxの有無を確認する
    box_exists=`vagrant box list | grep -c $1`
    if [ ${box_exists} -gt 0 ]
    then
        echo "$1 is exists ... ${COLOR_GREEN}true${COLOR_OFF}"
        return 0
    else
        echo "${COLOR_YELLOW}$1 is not found${COLOR_OFF}"
        return 1
    fi
}


##
# ユーザに yes/no の入力を促す
#
# @return boolean
function askYesOrNo() {
    while true ; do
        read -p "$1 (y/n)?" answer
        case $answer in
            [yY] | [yY]es | YES )
                return 0;;
            [nN] | [nN]o | NO )
                return 1;;
            * ) echo "Please answer yes or no.";;
        esac
    done
}

##
# help コマンド
#
# @command -h
function opt_help() {
    echo "Lame : ${VERSION}"
    echo
    echo "Usage:"
    echo "${CMDNAME} [command] <project_name>"
    echo "${CMDNAME} [options]"
    echo
    echo "Command:"
    echo "  new                     Create New Laravel and Homestead Project"
    echo "  clean                   Delete Laravel and Homestead Project"
    echo "  repair                  Resset Homestead"
    echo
    echo "Options:"
    echo "  -h, --help              Display this help message"
    echo "  -v, --version           Display this application version"
    echo "      --update            Update to latest version"
    echo "      --check             Check Installed need Software"
    echo "      --install           Install need software"
    echo
    echo "See:"
    echo "https://github.com/Kra8/lame"
    echo
}

##
# update コマンド
#
# @command -update
function opt_update() {
    curl -fsSL https://raw.githubusercontent.com/Kra8/lame/master/installer.sh | sh
}

###########################################
# Homebrewをインストールする
#
function install_brew() {
    ## homebrewが存在しない場合インストールを開始する
    if ! commandIsExists brew;
    then
        echo "${COLOR_YELLOW}Homebrew installing ...${COLOR_OFF}"
        # brew のインストール
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
}

###########################################
# virtualboxをインストールする
#
function install_virtualbox() {
    ## virtualboxが存在しない場合インストールを開始する
    if ! commandIsExists virtualbox;
    then
        echo "${COLOR_YELLOW}VirtualBox installing ...${COLOR_OFF}"
        # virtualboxのインストール
        brew cask install virtualbox
    fi
}

###########################################
# vagrantをインストール
#
function install_vagrant() {
    ## vagrantが存在しない場合インストールを開始する
    if ! commandIsExists virtualbox;
    then
        echo "${COLOR_YELLOW}Vagrant installing ...${COLOR_OFF}"
        # vagrantのインストール
        brew cask install vagrant
    fi
}

###########################################
# composerをインストール
#
function install_composer() {
    ## composerが存在しない場合インストールを開始する
    if ! commandIsExists composer;
    then
        echo "${COLOR_YELLOW}Composer installing ...${COLOR_OFF}"
        # composer のインストールに必要なphp56をインストール
        brew install php56
        # composer のインストール
        brew install homebrew/php/composer
    fi
}

###########################################
# laravelをインストール
#
function install_laravel() {
    ## laravelが存在するか。
    laravel="$HOME/.composer/vendor/bin/laravel"

    ## composerが存在しない場合インストールを開始する
    if ! commandIsExists $laravel;
    then
        echo "${COLOR_YELLOW}Laravel installing ...${COLOR_OFF}"
        # laravelのインストール
        composer global require "laravel/installer=~1.1"
    fi
}

##
# boxをダウンロード
#
function add_homestead_box() {
    ## boxの有無を確認する
    box_exists=`vagrant box list | grep -c 'homestead'`
    if [ ${box_exists} -gt 0 ]
    then
        echo "homestead box is exists ... ${COLOR_GREEN}true${COLOR_OFF}"
    else
        echo "homestead box is exists ... ${COLOR_YELLOW}false${COLOR_OFF}"
        # boxのダウンロード
        vagrant box add laravel/homestead
    fi
}

function edit_homestead_yaml() {
    project_name="$1"
    project_name_small=`echo $project_name | tr [A-Z] [a-z]`
    workspace="${CURRENT}/${project_name}"

    ## Homestead.yamlファイルの編集
    sed -i ".org" -e '/192.168.10.10/s/192.168.10.10/10.0.0.33/' Homestead.yaml
    sed -i -e "s:${workspace}:${workspace}/webroot:g" Homestead.yaml
    sed -i -e "s/$project_name.app/${project_name_small}.dev/g" Homestead.yaml
    sed -i -e "s:Code/::g" Homestead.yaml
    sed -i -e "s:- homestead:- ${project_name_small}:g" Homestead.yaml

    #余分なファイルの消去
    rm -f Homestead.yaml-e
}

##
# homesteadの設定を行う
#
function setting_homestead() {
    project_name="$1"
    workspace="${CURRENT}/${project_name}"

    # 第一引数が存在するか否か
    if [ -z $project_name ]; then
        abort "${COLOR_RED}setting_homestead : please set arguments.${COLOR_OFF}"
    fi

    if [ ! -e $workspace ]; then
        abort "${COLOR_RED}setting_homestead : '${workspace}' Application not found!${COLOR_OFF}"
    fi

    echo "Install Homestead..."
    cd $workspace

    ## Homestead.yamlが存在する場合、削除する
    if [ -e "Homestead.yaml" ];
    then rm Homestead.yaml; fi

    ## Homesteadのインストール
    composer require laravel/homestead --dev

    echo "Setting Homestead..."
    ## yamlの作成
    php vendor/bin/homestead make

    ## Homestead.yamlファイルの編集
    edit_homestead_yaml $project_name

    ## webrootへ移動
    cd webroot

    ## Key作成
    if [ ! -e ".env" ]; then
        echo "Create .env file"
        cp .env.example .env
    fi
    php artisan key:generate

    ## 元のディレクトリへ移動
    cd ${CURRENT}
}

##
# /etc/hostsファイルの編集
#
function setting_hosts() {
    host_name="$1"
    ## etc/hostsファイルを編集
    add_text="10.0.0.33 ${host_name}.dev # writed by lame(Laravel + Homestead)"
    host_exists=`cat /etc/hosts | grep -c "$add_text"`
    if [ $host_exists -lt 1 ]
    then
        echo "writing /etc/hosts"
        sudo sh -c "echo '${add_text}' >> /etc/hosts"
    fi
}

##
# 新規プロジェクトの作成
#
function new_project() {

    # var
    project_name="$1"
    project_name_small=`echo $project_name | tr [A-Z] [a-z]`
    laravel="$HOME/.composer/vendor/bin/laravel"

    # 第一引数が存在するか否か
    if [ -z $project_name ];
    then abort "${COLOR_RED}new : please set arguments.${COLOR_OFF}"; fi

    # check
    if check_all;
    then echo "complete";
    else abort "${COLOR_RED}please software install. or --install command.${COLOR_OFF}";
    fi

    echo "${project_name} project crafting ..."

    # already project file exist check
    if [ -e "${CURRENT}/${project_name}" ]; then
        abort "${COLOR_RED}Application already exists!${COLOR_OFF}"
    fi

    ## プロジェクトファイルの作成
    mkdir $project_name

    ## Laravelのプロジェクトを作成
    $laravel new "${project_name}/webroot"

    ## homesteadを設定
    setting_homestead $project_name

    ## etc/hostsファイルの編集
    setting_hosts "${project_name_small}"

    ## Homesteadを立ち上げる
    cd ${project_name}
    vagrant up

    ## ローカルで開く
    open http://${project_name_small}.dev
}

##
#
#
function opt_repair() {
    project_name="$1"
    if [ -z $project_name ]; then
        abort "${COLOR_RED}-r : please set arguments.${COLOR_OFF}"
    fi
    # file exist check
    if [ ! -e "${CURRENT}/${project_name}" ]; then
        abort "${COLOR_RED}${project_name} not found!${COLOR_OFF}"
    fi

    cd "${CURRENT}/${project_name}"

    setting_homestead $project_name

    echo "Reset Homestead!"
}


##
# lameが動作できる環境にあるか、チェックする
# 不具合がある場合、エラーを出力し終了する。
#
function check_all() {
    laravel="$HOME/.composer/vendor/bin/laravel"
    flag=0;

    if ! commandIsExists  brew;       then flag=1; fi
    if ! commandIsExists  virtualbox; then flag=1; fi
    if ! commandIsExists  vagrant;    then flag=1; fi
    if ! commandIsExists  composer;   then flag=1; fi
    if ! commandIsExists  $laravel;   then flag=1; fi
    if ! boxIsExists      homestead;  then flag=1; fi

    return $flag;
}

##
# ソフトウェア全てインストール
#
function opt_install() {
    install_brew        #Homebrew
    install_virtualbox  #VirtualBox
    install_vagrant     #Vagrant
    install_composer    #Composer
    install_laravel     #Laravel
    add_homestead_box   #Homestead Box
}

function opt_clean() {
    project_name=$1
    run_path=`pwd`

    #第一引数が存在するか否か
    if [ -z $project_name ];
    then abort "${COLOR_RED}clean : please set arguments.${COLOR_OFF}"; fi

    # file exist check
    if [ ! -e "${CURRENT}/${project_name}" ];
    then abort "${COLOR_RED}${project_name} not found!${COLOR_OFF}"; fi

    #ディレクトリ移動
    cd "${run_path}/${project_name}"

    #vagrant終了、および関連データの削除
    vagrant destroy --force

    #ディレクトリを戻す
    cd $run_path

    #ファイルを削除
    rm -rf $project_name
}

############################# 以下実行スクリプト #############################

## 引数なしの場合
if [ -z $1 ]; then
    opt_help
    exit 1
fi

## options解析
for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help' )
            opt_help
            exit 0
            ;;
        '-v'|'--version' )
            echo Lame : ${VERSION}
            echo
            exit 0
            ;;
        '--update' )
            opt_update
            echo
            exit 0
            ;;
        '--install' )
            opt_install
            exit 0
            ;;
        '--check' )
            check_all;
            exit 0
            ;;
        'repair')
            shift
            opt_repair $1
            exit 0
            ;;
        'new')
            new_project $2
            exit 0
            ;;
        'clean')
            opt_clean $2
            exit 0
            ;;
        -*)
            abort "${CMDNAME}: not found option '$(echo $1 | sed 's/^-*//')'"
            ;;
        *)
            # 引数のみ
            opt_help
            ;;
    esac
done

exit 0
